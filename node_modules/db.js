
var mongo = require('mongo');
var db = mongo.db;
var products = mongo.products;
var gsmarena = mongo.gsmarena;
var page1 = require('page');
var retailer_colors = mongo.retailer_colors;
var remote_user = mongo.remote_user;


function data_callback(data){
return data;

}

module.exports = {

add_product_phonearena : function(name,description,pic_path,category,brand,price,specs_arr,specs_html){
var prms = products.find({'name':name});	
prms.on('complete',function(err,data){
if(data != null){
if(data.length == 0){	
var new_specs_arr = new Array();
var promise = products.insert({'name':name,'description':description,'pic_path':pic_path,'category':category,'brand':brand,'price':price,'specification_array':JSON.stringify(specs_arr),'url':name,'views':0});
promise.on('success',function(){
console.log('Product added');
});
promise.on('error', function(err){
	console.log(err);
});
}
else{
	console.log("Product already present");
}
}
});

},

add_product_snapdeal : function(name,description,pic_path,category,brand,price,specs_html){
var prms = products.find({'name':name});	
prms.on('complete',function(err,data){
if(data.length == 0){	
var promise = products.insert({'name':name,'description':description,'pic_path':pic_path,'category':category,'brand':brand,'price':price,'specification_html':JSON.stringify(specs_html),'url':name,'views':0});
promise.on('success',function(){
console.log('Product added');
});
promise.on('error', function(err){
	console.log(err);
});
}
else{
	console.log("Product already present");
}
});
},

add_product : function(name,description,pic_path,category,brand,price,specs_arr){
var promise = gsmarena.insert({'name':name,'url':name,'description':description,'pic_path':pic_path,'category':category,'brand':brand,'price':price,'specification_array':JSON.stringify(specs_arr)});
promise.on('success',function(){
console.log(name);
});
promise.on('error', function(err){
console.log(err);
});
},

show_all_products : function(){
var promise = products.find();
promise.on('complete',function(err,docs){
docs.forEach(function(el,index,err){
console.log(el.name);
});
});
},

show_products : function(name){
var promise = products.find({name:name});
promise.on('success',function(docs){
docs.forEach(function(el,index,err){
console.log(el.name);
});
});
},


remove_product : function(){
var promise = products.remove({name:'Nokia Asha 2050'});
promise.on('success',function(docs){
console.log('Product removed');
});
},

show_products_by_brand : function(brand,callback){
var promise = products.find({brand:brand});
callback(docs);
promise.on('success',function(docs){
console.log(docs);
});
},


show_products_by_city : function(city){
var promise = products.find({city:city});
promise.on('success',function(docs){
console.log(docs);
});
},

show_filter_product : function(){

var promise = products.find({name:name,city:city});
promise.on('success',function(docs){
console.log(docs);
});
},


find_home : function(term,callback){
var promise = products.find({name:new RegExp(term,'i')},{limit:14});
promise.on('complete',function(err,docs){
console.log(err+'b'+docs);
callback(docs);
/*
docs.forEach(function(el,index,err){
});
*/
});
},


get_product_by_name : function(name){
var promise = products.find({'name':name});
promise.on('success',function(docs){
console.log(docs);
});
},

get_product_by_url : function(url,callback){
var promise = products.find({'url':url});
promise.on('complete',function(err,docs){
callback(docs);
});
},

get_product_by_id : function(){
var promise = products.find({id:id});
promise.on('success',function(docs){
console.log(docs);
});
},

get_similar_products : function(brand,callback){
var promise = products.find({brand:brand},{limit:3});
promise.on('complete',function(err,docs){
callback(docs);
});
},


show_products_by_category : function(category,callback){
var promise = products.find({category:category},{limit:20});
promise.on('complete',function(err,docs){
console.log('similar'+err);
callback(docs);
});
},


search_by_filter : function(brand,retailers,categories){
//var promise = db.products.find({$or:[{name}]});
},

get_trending_products : function(callback){

var promise = products.find({views:0},{limit:12});
promise.on('complete',function(err,docs){
console.log(err+'<br/>'+docs);
if(docs.length > 20){
docs = docs.slice(0,20);
callback(docs);
}else{
callback(docs);
}
});

},

find_similar : function(name,page,no,callback){
var start = page*no;
var promise = products.find({name:new RegExp(name,'i')});
promise.on('complete',function(err,docs){
var total_results_num = docs.length;
docs = page1.get_paged_results(start,no,docs);
callback(docs,total_results_num);
});
},

get_product_brands : function(name,callback){
var brands_arr = new Array();
var promise = products.find({name:new RegExp('^'+name,'i')});
promise.on('complete',function(err,docs){
docs.forEach(function(el,index,err){
if(brands_arr.indexOf(el.brand) == -1){
brands_arr.push(el.brand);
}
});
callback(brands_arr);
});
},


get_search_filter : function(brands_arr,retailer_arr,term,callback){
var results_arr = new Array();
if(brands_arr.length > 0){
brands_arr.forEach(function(el,index,err){
var promise = products.find({name:new RegExp('^'+term,'i'),brand:el});
promise.on('complete',function(err,data){
results_arr = results_arr.concat(data);
});
});
}

if(retailer_arr.length > 0){
retailer_arr.forEach(function(el,index,err){
var promise = products.find({retailer:el});
promise.on('complete',function(err,data){
results_arr = results_arr.concat(data);
});
});
}

setTimeout(function(){
callback(results_arr);
},2000);
},


get_brand_products : function(products){

},


get_product_colors : function(name,callback){
var colors_arr = new Array();
/*
var promise1 = products.find({name:new RegExp(name,'i')});
promise1.on('complete',function(err,docs1){
docs1.forEach(function(el,index,err){
var retailers = el['retailers'];
var name = el['name'];
retailers.forEach(function(el,index,err){
var retailer = el;
var promise = retailer_colors.find({retailer:retailer,name:name});
promise.on('complete',function(err,docs){
docs.forEach(function(el,index,err){
if(colors_arr.indexOf(el.color) == -1){
colors_arr.push(el.color);
}
});
callback(colors_arr);
});
});
});
});
*/
},


get_product_specs : function(name,callback){
var specs_arr = new Array();
var promise = products.find({name:new RegExp(term,'i')});
promise.on('complete',function(err,docs){
docs.forEach(function(el,index,err){
if(specs_arr.indexOf(el.name) == -1){
specs_arr.push(el.name);
}
});
callback(specs_arr);
});
},


get_product_by_city : function(name,city,callback){
var products_arr = new Array();
var promise = products.find({name:new RegExp(term,'i')});
promise.on('complete',function(err,docs){
docs.forEach(function(el,index,err){
var promise1 = retailer_colors.find({city:city});
promise1.on('complete',function(err,docs1){
docs1.forEach(function(el,index,err){
if(el.city == city){
products_arr.push(el);
}
});
});
});
callback(docs);
});
},update_pic_path : function(){

var promise1 = products.find();
promise1.on('success',function(docs1){
	
	docs1.forEach(function(el1,index1,err1){
		var promise2 = gsmarena.find();
		promise2.on('success',function(docs2){	
			
			docs2.forEach(function(element,index,error){
				console.log(el1.name+"\t"+ element.name);
				if(el1.name == element.name ){				
					var prmse=products.update({name:element.name},{$set:{pic_path:element.pic_path}},{upsert:true});
					prmse.on('success',function(){
						found = true;
						console.log("changed");
					});
				}
				else{
					console.log("not present");
				}
			});
		});
	});
});

},


get_product_retailers : function(name){
var retailers_arr = new Array();
var promise = products.find();
promise.on('complete',function(err,docs){
docs.forEach(function(el,index,err){
var retailer_products = docs['products'];
var retailer_name = docs['business_name'];
retailer_products.forEach(function(el,index,err){
if(el.name == name){
if(retailer_arr.indexOf(el.name) == -1){
retailer_arr.push(retailer_name);
}
}
});
});
});
},


get_retailer_arr : function(){

},


get_best_price : function(name){
var best_price = 0;
var price_arr = new Array();
var promise = user.find({'products.product_name':{$exists:name}});
promise.on('complete',function(err,docs){
docs.forEach(function(el,index,err){
if(el.name == name){
price_arr.push(el.product_price);
}
});
});

},


get_remote_retailers : function(callback){
var promise = remote_user.find({});
promise.on('complete',function(err,docs){
callback(err,docs);
});
},


get_product_remote_retailers : function(product_name,callback){
var promise = remote_user.find({products:{$not:{$size:0}}},{products:{$elemMatch:{product_name:product_name}}});
promise.on('complete',function(err,docs){
callback(err,docs);
});
},


get_product_by_os : function(product_name,os,callback){
var products_arr = new Array();
var promise = products.find({},{specification_array:{os:os}});
promise.on('complete',function(err,docs){
$.each(docs,function(key,value){
console.log(value['specification_array']);
});
});
},


get_product_best_price : function(product_name,callback){
var promise = remote_user.find({},{products:{$elemMatch:{product_name:product_name}}});
promise.on('complete',function(err,docs){
callback(err,docs);
});
}







}
