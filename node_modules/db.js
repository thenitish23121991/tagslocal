
var mongo = require('mongo');
var db = mongo.db;
var products = mongo.products;


function data_callback(data){
return data;
}

module.exports = {

add_product : function(name,description,pic_path,category,brand){
//console.log(name);
var promise = products.insert({'name':name,'description':description,'pic_path':pic_path,'category':category,'brand':brand,'views':0,'url':name});
promise.on('complete',function(err,docs){
//console.log(err+'b'+docs);
});
},

show_all_products : function(){
var promise = products.find();
promise.on('complete',function(err,docs){
docs.forEach(function(el,index,err){
console.log(el.name);
});
});
},

show_products : function(name){
var promise = products.find({name:name});
promise.on('success',function(docs){
docs.forEach(function(el,index,err){
console.log(el.name);
});
});
},


remove_product : function(){
var promise = products.remove({name:'Nokia Asha 2050'});
promise.on('success',function(docs){
console.log('Product removed');
});
},

show_products_by_brand : function(brand){
var promise = products.find({brand:brand});
promise.on('success',function(docs){
console.log(docs);
});
},


show_products_by_city : function(city){
var promise = products.find({city:city});
promise.on('success',function(docs){
console.log(docs);
});
},

show_filter_product : function(){

var promise = products.find({name:name,city:city});
promise.on('success',function(docs){
console.log(docs);
});
},


find_home : function(term,callback){
var promise = products.find({name:new RegExp('^'+term,'i'),brand:new RegExp('^'+term,'i')});
promise.on('complete',function(err,docs){
console.log(err+'b'+docs);
callback(docs);
/*
docs.forEach(function(el,index,err){
});
*/
});
},


get_product_by_name : function(name){
var promise = products.find({'name':name});
promise.on('success',function(docs){
console.log(docs);
});
},

get_product_by_url : function(url,callback){
var promise = products.find({'url':url});
promise.on('complete',function(err,docs){
callback(docs);
});
},

get_product_by_id : function(){
var promise = products.find({id:id});
promise.on('success',function(docs){
console.log(docs);
});
},


show_products_by_category : function(category,callback){
var promise = products.find({category:category});
promise.on('complete',function(err,docs){
callback(docs);
});
},


search_by_filter : function(brand,retailers,categories){
//var promise = db.products.find({$or:[{name}]});
},


get_trending_products : function(callback){
var promise = products.find({},{sort:{views:1}});
promise.on('complete',function(err,docs){
callback(docs);
});
},


find_similar : function(name,callback){
var promise = products.find({name:new RegExp('^'+name,'i')});
promise.on('complete',function(err,docs){
callback(docs);
});
},

get_product_brands : function(name,callback){
var brands_arr = new Array();
var promise = products.find({name:new RegExp('^'+name,'i')});
promise.on('complete',function(err,docs){
docs.forEach(function(el,index,err){
if(brands_arr.indexOf(el.brand) == -1){
brands_arr.push(el.brand);
}
});
callback(brands_arr);
});
},


get_search_filter : function(brands_arr,retailer_arr,term,callback){
var results_arr = new Array();
if(brands_arr.length > 0){
brands_arr.forEach(function(el,index,err){
var promise = products.find({name:new RegExp('^'+term,'i'),brand:el});
promise.on('complete',function(err,data){
results_arr = results_arr.concat(data);
});
});
}

if(retailer_arr.length > 0){
retailer_arr.forEach(function(el,index,err){
var promise = products.find({retailer:el});
promise.on('complete',function(err,data){
results_arr = results_arr.concat(data);
});
});
}

setTimeout(function(){
callback(results_arr);
},2000);
}




}